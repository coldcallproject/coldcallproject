{"ast":null,"code":"const visit = require('unist-util-visit');\n\nconst emoji = require('node-emoji');\n\nconst emoticon = require('emoticon');\n\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /[$@|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\nconst DEFAULT_SETTINGS = {\n  padSpaceAfter: false,\n  emoticon: false\n};\n\nfunction plugin(options) {\n  const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n  const pad = !!settings.padSpaceAfter;\n  const emoticonEnable = !!settings.emoticon;\n\n  function getEmojiByShortCode(match) {\n    // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n    const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n\n    const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n\n    const trimmedChar = iconPart ? match.slice(-1) : '';\n    const addPad = pad ? ' ' : '';\n    let icon = iconFull ? iconFull.emoji + addPad : iconPart && iconPart.emoji + addPad + trimmedChar;\n    return icon || match;\n  }\n\n  function getEmoji(match) {\n    const got = emoji.get(match);\n\n    if (pad && got !== match) {\n      return got + ' ';\n    }\n\n    return got;\n  }\n\n  function transformer(tree) {\n    visit(tree, 'text', function (node) {\n      node.value = node.value.replace(RE_EMOJI, getEmoji);\n\n      if (emoticonEnable) {\n        node.value = node.value.replace(RE_SHORT, getEmojiByShortCode);\n      }\n    });\n  }\n\n  return transformer;\n}\n\nmodule.exports = plugin;","map":{"version":3,"sources":["/Users/inwoo/Projects/coldcallproject/coldcallproject/node_modules/remark-emoji/index.js"],"names":["visit","require","emoji","emoticon","RE_EMOJI","RE_SHORT","DEFAULT_SETTINGS","padSpaceAfter","plugin","options","settings","Object","assign","pad","emoticonEnable","getEmojiByShortCode","match","iconFull","find","e","emoticons","includes","iconPart","slice","trimmedChar","addPad","icon","getEmoji","got","get","transformer","tree","node","value","replace","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMG,QAAQ,GAAG,sBAAjB;AACA,MAAMC,QAAQ,GAAG,iDAAjB;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,aAAa,EAAE,KADM;AAErBJ,EAAAA,QAAQ,EAAE;AAFW,CAAzB;;AAKA,SAASK,MAAT,CAAgBC,OAAhB,EAAyB;AACrB,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,gBAAlB,EAAoCG,OAApC,CAAjB;AACA,QAAMI,GAAG,GAAG,CAAC,CAACH,QAAQ,CAACH,aAAvB;AACA,QAAMO,cAAc,GAAG,CAAC,CAACJ,QAAQ,CAACP,QAAlC;;AAEA,WAASY,mBAAT,CAA6BC,KAA7B,EAAoC;AAChC;AACA,UAAMC,QAAQ,GAAGd,QAAQ,CAACe,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,SAAF,CAAYC,QAAZ,CAAqBL,KAArB,CAAnB,CAAjB,CAFgC,CAEkC;;AAClE,UAAMM,QAAQ,GAAGnB,QAAQ,CAACe,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,SAAF,CAAYC,QAAZ,CAAqBL,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAArB,CAAnB,CAAjB,CAHgC,CAG+C;;AAC/E,UAAMC,WAAW,GAAGF,QAAQ,GAAGN,KAAK,CAACO,KAAN,CAAY,CAAC,CAAb,CAAH,GAAoB,EAAhD;AACA,UAAME,MAAM,GAAGZ,GAAG,GAAG,GAAH,GAAQ,EAA1B;AACA,QAAIa,IAAI,GAAGT,QAAQ,GACfA,QAAQ,CAACf,KAAT,GAAiBuB,MADF,GAEfH,QAAQ,IAAKA,QAAQ,CAACpB,KAAT,GAAiBuB,MAAjB,GAA2BD,WAF5C;AAGA,WAAOE,IAAI,IAAIV,KAAf;AACH;;AAED,WAASW,QAAT,CAAkBX,KAAlB,EAAyB;AACrB,UAAMY,GAAG,GAAG1B,KAAK,CAAC2B,GAAN,CAAUb,KAAV,CAAZ;;AACA,QAAIH,GAAG,IAAIe,GAAG,KAAKZ,KAAnB,EAA0B;AACtB,aAAOY,GAAG,GAAG,GAAb;AACH;;AACD,WAAOA,GAAP;AACH;;AAED,WAASE,WAAT,CAAqBC,IAArB,EAA2B;AACvB/B,IAAAA,KAAK,CAAC+B,IAAD,EAAO,MAAP,EAAe,UAASC,IAAT,EAAe;AAC/BA,MAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmB9B,QAAnB,EAA6BuB,QAA7B,CAAb;;AACA,UAAIb,cAAJ,EAAoB;AAChBkB,QAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmB7B,QAAnB,EAA6BU,mBAA7B,CAAb;AACH;AACJ,KALI,CAAL;AAMH;;AAED,SAAOe,WAAP;AACH;;AAEDK,MAAM,CAACC,OAAP,GAAiB5B,MAAjB","sourcesContent":["const visit = require('unist-util-visit');\nconst emoji = require('node-emoji');\nconst emoticon = require('emoticon');\n\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /[$@|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\n\nconst DEFAULT_SETTINGS = {\n    padSpaceAfter: false,\n    emoticon: false\n};\n\nfunction plugin(options) {\n    const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n    const pad = !!settings.padSpaceAfter;\n    const emoticonEnable = !!settings.emoticon;\n\n    function getEmojiByShortCode(match) {\n        // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n        const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n        const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n        const trimmedChar = iconPart ? match.slice(-1): '';\n        const addPad = pad ? ' ': '';\n        let icon = iconFull ?\n            iconFull.emoji + addPad:\n            iconPart && (iconPart.emoji + addPad +  trimmedChar);\n        return icon || match;\n    }\n\n    function getEmoji(match) {\n        const got = emoji.get(match);\n        if (pad && got !== match) {\n            return got + ' ';\n        }\n        return got;\n    }\n\n    function transformer(tree) {\n        visit(tree, 'text', function(node) {\n            node.value = node.value.replace(RE_EMOJI, getEmoji);\n            if (emoticonEnable) {\n                node.value = node.value.replace(RE_SHORT, getEmojiByShortCode);\n            }\n        });\n    }\n\n    return transformer;\n}\n\nmodule.exports = plugin;\n"]},"metadata":{},"sourceType":"script"}