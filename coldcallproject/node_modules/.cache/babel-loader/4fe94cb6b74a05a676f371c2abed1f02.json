{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { keysOf } from '../components/common';\nexport var BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexport var BREAKPOINT_KEYS = keysOf(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexport function getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS; // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n\n  return keysOf(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}\n/**\n * Given the current `width` and a max breakpoint key,\n * this function returns true or false if the `width` falls within the max\n * breakpoint or any breakpoints below\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize | number} max The named breakpoint or custom number to check against\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\n\nexport function isWithinMaxBreakpoint(width, max) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n\n  if (typeof max === 'number') {\n    return width <= max;\n  } else {\n    var currentBreakpoint = getBreakpoint(width, breakpoints);\n    return currentBreakpoint ? breakpoints[currentBreakpoint] <= breakpoints[max] : false;\n  }\n}\n/**\n * Given the current `width` and an array of breakpoint keys,\n * this function returns true or false if the `width` falls within\n * any of the named breakpoints\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize[]} sizes An array of named breakpoints\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\n\nexport function isWithinBreakpoints(width, sizes) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n  var currentBreakpoint = getBreakpoint(width, breakpoints);\n  return currentBreakpoint ? sizes.includes(currentBreakpoint) : false;\n}","map":{"version":3,"sources":["/Users/inwoo/Projects/coldcallproject/coldcallproject/node_modules/@elastic/eui/es/services/breakpoint.js"],"names":["keysOf","BREAKPOINTS","xl","l","m","s","xs","BREAKPOINT_KEYS","getBreakpoint","width","breakpoints","arguments","length","undefined","find","key","isWithinMaxBreakpoint","max","currentBreakpoint","isWithinBreakpoints","sizes","includes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,sBAAvB;AACA,OAAO,IAAIC,WAAW,GAAG;AACvBC,EAAAA,EAAE,EAAE,IADmB;AAEvBC,EAAAA,CAAC,EAAE,GAFoB;AAGvBC,EAAAA,CAAC,EAAE,GAHoB;AAIvBC,EAAAA,CAAC,EAAE,GAJoB;AAKvBC,EAAAA,EAAE,EAAE;AALmB,CAAlB;AAOP,OAAO,IAAIC,eAAe,GAAGP,MAAM,CAACC,WAAD,CAA5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,MAAIC,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEV,WAAtF,CADmC,CAEnC;;AACA,SAAOD,MAAM,CAACC,WAAD,CAAN,CAAoBa,IAApB,CAAyB,UAAUC,GAAV,EAAe;AAC7C,WAAOL,WAAW,CAACK,GAAD,CAAX,IAAoBN,KAA3B;AACD,GAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,qBAAT,CAA+BP,KAA/B,EAAsCQ,GAAtC,EAA2C;AAChD,MAAIP,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEV,WAAtF;;AAEA,MAAI,OAAOgB,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOR,KAAK,IAAIQ,GAAhB;AACD,GAFD,MAEO;AACL,QAAIC,iBAAiB,GAAGV,aAAa,CAACC,KAAD,EAAQC,WAAR,CAArC;AACA,WAAOQ,iBAAiB,GAAGR,WAAW,CAACQ,iBAAD,CAAX,IAAkCR,WAAW,CAACO,GAAD,CAAhD,GAAwD,KAAhF;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAT,CAA6BV,KAA7B,EAAoCW,KAApC,EAA2C;AAChD,MAAIV,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEV,WAAtF;AACA,MAAIiB,iBAAiB,GAAGV,aAAa,CAACC,KAAD,EAAQC,WAAR,CAArC;AACA,SAAOQ,iBAAiB,GAAGE,KAAK,CAACC,QAAN,CAAeH,iBAAf,CAAH,GAAuC,KAA/D;AACD","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { keysOf } from '../components/common';\nexport var BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexport var BREAKPOINT_KEYS = keysOf(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexport function getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS;\n  // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n  return keysOf(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}\n/**\n * Given the current `width` and a max breakpoint key,\n * this function returns true or false if the `width` falls within the max\n * breakpoint or any breakpoints below\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize | number} max The named breakpoint or custom number to check against\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\n\nexport function isWithinMaxBreakpoint(width, max) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n\n  if (typeof max === 'number') {\n    return width <= max;\n  } else {\n    var currentBreakpoint = getBreakpoint(width, breakpoints);\n    return currentBreakpoint ? breakpoints[currentBreakpoint] <= breakpoints[max] : false;\n  }\n}\n/**\n * Given the current `width` and an array of breakpoint keys,\n * this function returns true or false if the `width` falls within\n * any of the named breakpoints\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpointSize[]} sizes An array of named breakpoints\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimum width\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\n\nexport function isWithinBreakpoints(width, sizes) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BREAKPOINTS;\n  var currentBreakpoint = getBreakpoint(width, breakpoints);\n  return currentBreakpoint ? sizes.includes(currentBreakpoint) : false;\n}"]},"metadata":{},"sourceType":"module"}