{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar getSearchableLabel = function getSearchableLabel(option) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var searchableLabel = option.searchableLabel || option.label;\n  return normalize ? searchableLabel.trim().toLowerCase() : searchableLabel;\n};\n\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return getSearchableLabel(option) === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, normalizedSearchValue, isPreFiltered, selectedOptions) {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    var selectedOption = getSelectedOptionForSearchValue(getSearchableLabel(option, false), selectedOptions);\n\n    if (selectedOption) {\n      return false;\n    }\n  } // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = getSearchableLabel(option);\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, searchValue, isPreFiltered, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    collectMatchingOption(matchingOptions, option, normalizedSearchValue, isPreFiltered, selectedOptions);\n  });\n  return matchingOptions;\n};","map":{"version":3,"sources":["/Users/inwoo/Projects/coldcallproject/coldcallproject/node_modules/@elastic/eui/es/components/selectable/matching_options.js"],"names":["getSearchableLabel","option","normalize","arguments","length","undefined","searchableLabel","label","trim","toLowerCase","getSelectedOptionForSearchValue","searchValue","selectedOptions","normalizedSearchValue","find","collectMatchingOption","accumulator","isPreFiltered","selectedOption","push","normalizedOption","includes","getMatchingOptions","options","matchingOptions","forEach"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AAC3D,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAApF;AACA,MAAIG,eAAe,GAAGL,MAAM,CAACK,eAAP,IAA0BL,MAAM,CAACM,KAAvD;AACA,SAAOL,SAAS,GAAGI,eAAe,CAACE,IAAhB,GAAuBC,WAAvB,EAAH,GAA0CH,eAA1D;AACD,CAJD;;AAMA,IAAII,+BAA+B,GAAG,SAASA,+BAAT,CAAyCC,WAAzC,EAAsDC,eAAtD,EAAuE;AAC3G,MAAIC,qBAAqB,GAAGF,WAAW,CAACF,WAAZ,EAA5B;AACA,SAAOG,eAAe,CAACE,IAAhB,CAAqB,UAAUb,MAAV,EAAkB;AAC5C,WAAOD,kBAAkB,CAACC,MAAD,CAAlB,KAA+BY,qBAAtC;AACD,GAFM,CAAP;AAGD,CALD;;AAOA,IAAIE,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,WAA/B,EAA4Cf,MAA5C,EAAoDY,qBAApD,EAA2EI,aAA3E,EAA0FL,eAA1F,EAA2G;AACrI;AACA;AACA,MAAIA,eAAJ,EAAqB;AACnB,QAAIM,cAAc,GAAGR,+BAA+B,CAACV,kBAAkB,CAACC,MAAD,EAAS,KAAT,CAAnB,EAAoCW,eAApC,CAApD;;AAEA,QAAIM,cAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;AACF,GAToI,CASnI;AACF;;;AAGA,MAAID,aAAJ,EAAmB;AACjBD,IAAAA,WAAW,CAACG,IAAZ,CAAiBlB,MAAjB;AACA;AACD;;AAED,MAAI,CAACY,qBAAL,EAA4B;AAC1BG,IAAAA,WAAW,CAACG,IAAZ,CAAiBlB,MAAjB;AACA;AACD;;AAED,MAAImB,gBAAgB,GAAGpB,kBAAkB,CAACC,MAAD,CAAzC;;AAEA,MAAImB,gBAAgB,CAACC,QAAjB,CAA0BR,qBAA1B,CAAJ,EAAsD;AACpDG,IAAAA,WAAW,CAACG,IAAZ,CAAiBlB,MAAjB;AACD;AACF,CA5BD;;AA8BA,OAAO,IAAIqB,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCZ,WAArC,EAAkDM,aAAlD,EAAiEL,eAAjE,EAAkF;AAChH,MAAIC,qBAAqB,GAAGF,WAAW,CAACF,WAAZ,EAA5B;AACA,MAAIe,eAAe,GAAG,EAAtB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUxB,MAAV,EAAkB;AAChCc,IAAAA,qBAAqB,CAACS,eAAD,EAAkBvB,MAAlB,EAA0BY,qBAA1B,EAAiDI,aAAjD,EAAgEL,eAAhE,CAArB;AACD,GAFD;AAGA,SAAOY,eAAP;AACD,CAPM","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar getSearchableLabel = function getSearchableLabel(option) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var searchableLabel = option.searchableLabel || option.label;\n  return normalize ? searchableLabel.trim().toLowerCase() : searchableLabel;\n};\n\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return getSearchableLabel(option) === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, normalizedSearchValue, isPreFiltered, selectedOptions) {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    var selectedOption = getSelectedOptionForSearchValue(getSearchableLabel(option, false), selectedOptions);\n\n    if (selectedOption) {\n      return false;\n    }\n  } // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = getSearchableLabel(option);\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, searchValue, isPreFiltered, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    collectMatchingOption(matchingOptions, option, normalizedSearchValue, isPreFiltered, selectedOptions);\n  });\n  return matchingOptions;\n};"]},"metadata":{},"sourceType":"module"}